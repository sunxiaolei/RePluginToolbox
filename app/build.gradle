apply plugin: 'com.android.application'
//apply plugin: 'replugin-plugin-gradle'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion as int
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "xiaolei.plugintoolbox"
        minSdkVersion rootProject.ext.android.minSdkVersion as int
        targetSdkVersion rootProject.ext.android.targetSdkVersion as int
        versionCode rootProject.ext.android.versionCode as int
        versionName rootProject.ext.android.versionName
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file("keystore.jks")
            storePassword "123456"
            keyAlias "a"
            keyPassword "123456"
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
        javaMaxHeapSize "1g"
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile rootProject.ext.dependencies['appcompat-v7']
    compile rootProject.ext.dependencies['recyclerview-v7']
    compile rootProject.ext.dependencies['cardview-v7']
//    compile rootProject.ext.dependencies['replugin']
    compile rootProject.ext.dependencies['retrofit']
    compile rootProject.ext.dependencies['adapter-rxjava2']
    compile rootProject.ext.dependencies['converter-gson']
    compile rootProject.ext.dependencies['rxandroid']
    compile rootProject.ext.dependencies['rxjava']
    compile rootProject.ext.dependencies['rxlifecycle']
    compile rootProject.ext.dependencies['rxlifecycle-components']
    compile rootProject.ext.dependencies['rxbinding']
    compile rootProject.ext.dependencies['rxbinding-support-v4']
    compile rootProject.ext.dependencies['rxbinding-appcompat-v7']
    compile rootProject.ext.dependencies['rxbinding-design']
    compile rootProject.ext.dependencies['rxbinding-recyclerview-v7']
    compile rootProject.ext.dependencies['adapter-helper']
    compile rootProject.ext.dependencies['utils']
    compile rootProject.ext.dependencies['glide']
    compile rootProject.ext.dependencies['swipeback']
    compile rootProject.ext.dependencies['loading']
    compile rootProject.ext.dependencies['md-dialog']
    compile rootProject.ext.dependencies['md-dialog-commons']
    compile 'com.github.promeg:tinypinyin:2.0.3'
}

public class BuildTimeListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private times = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        times.add([ms, task.path])

        //task.project.logger.warn "${task.path} spend ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task spend time:"
        for (time in times) {
            if (time[0] >= 50) {
                printf "%7sms  %s\n", time
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

project.gradle.addListener(new BuildTimeListener())

